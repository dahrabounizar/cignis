{
  "version": 3,
  "sources": ["../../workspace/netlify/functions/fetch-profile-metrics.js"],
  "sourceRoot": "/tmp/tmp-2720-d9M9paJJOT1g",
  "sourcesContent": ["export async function handler(event, context) {\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'\n      }\n    };\n  }\n\n  const { authorization } = event.headers;\n  \n  if (!authorization) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ error: 'No authorization token' })\n    };\n  }\n\n  try {\n    // Fetch profile data\n    const profileResponse = await fetch(\n      'https://api.linkedin.com/rest/memberSnapshotData?q=criteria&domain=PROFILE',\n      {\n        headers: {\n          'Authorization': authorization,\n          'LinkedIn-Version': '202312'\n        }\n      }\n    );\n    \n    const profileData = await profileResponse.json();\n    const profile = profileData.elements?.[0]?.snapshotData?.[0] || {};\n    \n    // Extract available metrics with multiple field name variations\n    const metrics = {\n      profileViews: profile['Profile Views'] || profile['profile_views'] || profile.profileViews || 0,\n      searchAppearances: profile['Search Appearances'] || profile['search_appearances'] || profile.searchAppearances || 0,\n      uniqueViewers: profile['Unique Viewers'] || profile['unique_viewers'] || profile.uniqueViewers || 0,\n      viewerCompanies: profile['Viewer Companies'] || profile['viewer_companies'] || profile.viewerCompanies || [],\n      viewerTitles: profile['Viewer Titles'] || profile['viewer_titles'] || profile.viewerTitles || []\n    };\n    \n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      },\n      body: JSON.stringify(metrics)\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({ error: error.message })\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,QAAQ,OAAO,SAAS;AAC5C,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAEA,QAAM,EAAE,cAAc,IAAI,MAAM;AAEhC,MAAI,CAAC,eAAe;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,yBAAyB,CAAC;AAAA,IAC1D;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,kBAAkB,MAAM;AAAA,MAC5B;AAAA,MACA;AAAA,QACE,SAAS;AAAA,UACP,iBAAiB;AAAA,UACjB,oBAAoB;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,cAAc,MAAM,gBAAgB,KAAK;AAC/C,UAAM,UAAU,YAAY,WAAW,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC;AAGjE,UAAM,UAAU;AAAA,MACd,cAAc,QAAQ,eAAe,KAAK,QAAQ,eAAe,KAAK,QAAQ,gBAAgB;AAAA,MAC9F,mBAAmB,QAAQ,oBAAoB,KAAK,QAAQ,oBAAoB,KAAK,QAAQ,qBAAqB;AAAA,MAClH,eAAe,QAAQ,gBAAgB,KAAK,QAAQ,gBAAgB,KAAK,QAAQ,iBAAiB;AAAA,MAClG,iBAAiB,QAAQ,kBAAkB,KAAK,QAAQ,kBAAkB,KAAK,QAAQ,mBAAmB,CAAC;AAAA,MAC3G,cAAc,QAAQ,eAAe,KAAK,QAAQ,eAAe,KAAK,QAAQ,gBAAgB,CAAC;AAAA,IACjG;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,MAClC;AAAA,MACA,MAAM,KAAK,UAAU,OAAO;AAAA,IAC9B;AAAA,EACF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": []
}
