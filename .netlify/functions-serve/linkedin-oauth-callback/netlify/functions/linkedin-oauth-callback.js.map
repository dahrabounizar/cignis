{
  "version": 3,
  "sources": ["../../workspace/netlify/functions/linkedin-oauth-callback.js"],
  "sourceRoot": "/tmp/tmp-2720-Hys5l9OwMrgo",
  "sourcesContent": ["export async function handler(event, context) {\n  console.log('OAuth callback called with:', event.queryStringParameters);\n  \n  const { code, state } = event.queryStringParameters || {};\n  \n  if (!code) {\n    console.error('No authorization code provided');\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: 'No authorization code provided' })\n    };\n  }\n  \n  try {\n    // Determine which client credentials to use based on state\n    const clientId = state === 'dma' ? process.env.LINKEDIN_DMA_CLIENT_ID : process.env.LINKEDIN_CLIENT_ID;\n    const clientSecret = state === 'dma' ? process.env.LINKEDIN_DMA_CLIENT_SECRET : process.env.LINKEDIN_CLIENT_SECRET;\n    \n    console.log('Using client ID:', clientId, 'for state:', state);\n    \n    if (!clientId || !clientSecret) {\n      console.error('Missing client credentials for state:', state);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Missing client credentials' })\n      };\n    }\n    \n    const tokenResponse = await fetch('https://www.linkedin.com/oauth/v2/accessToken', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: `${process.env.URL}/.netlify/functions/linkedin-oauth-callback`,\n        client_id: clientId,\n        client_secret: clientSecret\n      })\n    });\n    \n    const tokens = await tokenResponse.json();\n    console.log('Token response:', tokens);\n    \n    if (tokens.error) {\n      console.error('Token error:', tokens);\n      throw new Error(tokens.error_description || tokens.error);\n    }\n    \n    // Store token type based on state\n    const tokenType = state === 'dma' ? 'dma_token' : 'access_token';\n    const baseUrl = process.env.NODE_ENV === 'development' \n      ? 'http://localhost:5173' \n      : (process.env.URL || 'https://localhost:5173');\n    const redirectUrl = `${baseUrl}/?${tokenType}=${tokens.access_token}`;\n    console.log('Redirecting to:', redirectUrl);\n    \n    return {\n      statusCode: 302,\n      headers: {\n        Location: redirectUrl,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    };\n  } catch (error) {\n    console.error('OAuth callback error:', error);\n    return {\n      statusCode: 500,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ error: error.message })\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,QAAQ,OAAO,SAAS;AAC5C,UAAQ,IAAI,+BAA+B,MAAM,qBAAqB;AAEtE,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,yBAAyB,CAAC;AAExD,MAAI,CAAC,MAAM;AACT,YAAQ,MAAM,gCAAgC;AAC9C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,iCAAiC,CAAC;AAAA,IAClE;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,WAAW,UAAU,QAAQ,QAAQ,IAAI,yBAAyB,QAAQ,IAAI;AACpF,UAAM,eAAe,UAAU,QAAQ,QAAQ,IAAI,6BAA6B,QAAQ,IAAI;AAE5F,YAAQ,IAAI,oBAAoB,UAAU,cAAc,KAAK;AAE7D,QAAI,CAAC,YAAY,CAAC,cAAc;AAC9B,cAAQ,MAAM,yCAAyC,KAAK;AAC5D,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,6BAA6B,CAAC;AAAA,MAC9D;AAAA,IACF;AAEA,UAAM,gBAAgB,MAAM,MAAM,iDAAiD;AAAA,MACjF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,IAAI,gBAAgB;AAAA,QACxB,YAAY;AAAA,QACZ;AAAA,QACA,cAAc,GAAG,QAAQ,IAAI,GAAG;AAAA,QAChC,WAAW;AAAA,QACX,eAAe;AAAA,MACjB,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS,MAAM,cAAc,KAAK;AACxC,YAAQ,IAAI,mBAAmB,MAAM;AAErC,QAAI,OAAO,OAAO;AAChB,cAAQ,MAAM,gBAAgB,MAAM;AACpC,YAAM,IAAI,MAAM,OAAO,qBAAqB,OAAO,KAAK;AAAA,IAC1D;AAGA,UAAM,YAAY,UAAU,QAAQ,cAAc;AAClD,UAAM,UAAU,QAAQ,IAAI,aAAa,gBACrC,0BACC,QAAQ,IAAI,OAAO;AACxB,UAAM,cAAc,GAAG,OAAO,KAAK,SAAS,IAAI,OAAO,YAAY;AACnE,YAAQ,IAAI,mBAAmB,WAAW;AAE1C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,UAAU;AAAA,QACV,iBAAiB;AAAA,QACjB,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": []
}
